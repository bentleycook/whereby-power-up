{"version":3,"sources":["../js/modules/localizationSettings.js","../js/settings.js"],"names":["defaultLocale","supportedLocales","resourceUrl","t","window","TrelloPowerUp","iframe","localization","localizationSettings","inputEl","document","getElementById","addEventListener","e","preventDefault","roomName","value","classList","set","then","alert","message","localizeKey","display","closePopup","render","localizeNode","body","get","placeholder","sizeTo"],"mappings":";AAAe,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAAA,IAAA,EAAA,CACbA,cAAe,KACfC,iBAAkB,CAAA,KAMhB,MAmBFC,YAAa,mBA3BA,QAAA,QAAA;;ACmCf,aAnCA,IAAA,EAAA,EAAA,QAAA,mCAmCA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAjCA,IAAMC,EAAIC,OAAOC,cAAcC,OAAO,CACpCC,aAAcC,EAAAA,UAGVC,EAAUC,SAASC,eAAe,YAExCD,SAASC,eAAe,UAAUC,iBAAiB,QAAS,SAAAC,GAC1DA,EAAEC,iBAEIC,IAAAA,EAAWN,EAAQO,MAER,KAAbD,EAEFN,EAAQQ,UAAY,SAEpBR,EAAQQ,UAAY,GAEpBd,EAAEe,IAAI,QAAS,SAAU,WAAYH,GAAUI,KAAK,WAElDhB,EAAEiB,MAAM,CACNC,QAAYlB,GAAAA,OAAAA,EAAEmB,YAAY,iBAAoBP,KAAAA,OAAAA,GAC9CQ,QAAS,YAEXpB,EAAEqB,kBAMRf,EAAQG,iBAAiB,QAAS,WAChCH,EAAQQ,UAAY,KAGtBd,EAAEsB,OAAO,WACPtB,EAAEuB,aAAahB,SAASiB,MAGxBxB,EAAEyB,IAAI,QAAS,SAAU,YAAYT,KAAK,SAAAJ,GACpCA,IACFN,EAAQO,MAAQD,GAElBN,EAAQoB,YAAc1B,EAAEmB,YAAY,mBAItCnB,EAAE2B,OAAOpB,SAASiB","file":"settings.bb7b9cc1.js","sourceRoot":"../src/html","sourcesContent":["export default {\n  defaultLocale: 'en',\n  supportedLocales: [\n    // Uncomment locales as you support them by adding\n    // string .json files to /strings/ directory.\n    // 'cs',\n    // 'de',\n    'en',\n    'es',\n    // 'fi',\n    // 'fr',\n    // 'hu',\n    // 'it',\n    // 'ja',\n    // 'nb',\n    // 'nl',\n    // 'pl',\n    // 'pt-BR',\n    // 'ru',\n    // 'sv',\n    // 'th',\n    // 'tr',\n    // 'uk',\n    // 'vi',\n    // 'zh-Hans',\n    // 'zh-Hant',\n  ],\n  resourceUrl: './{locale}.json',\n};\n","import localizationSettings from './modules/localizationSettings';\n\nconst t = window.TrelloPowerUp.iframe({\n  localization: localizationSettings,\n});\n\nconst inputEl = document.getElementById('roomName');\n\ndocument.getElementById('update').addEventListener('click', e => {\n  e.preventDefault();\n\n  const roomName = inputEl.value;\n\n  if (roomName === '') {\n    // You may want to do some other input validation here\n    inputEl.classList = 'error';\n  } else {\n    inputEl.classList = '';\n    // Store the input's value in Power-Up storage\n    t.set('board', 'shared', 'roomName', roomName).then(() => {\n      // Let the user know that they room name has been set\n      t.alert({\n        message: `${t.localizeKey('set-room-name')} ${roomName}`,\n        display: 'success',\n      });\n      t.closePopup();\n    });\n  }\n});\n\n// Remove error class on keyup\ninputEl.addEventListener('keyup', () => {\n  inputEl.classList = '';\n});\n\nt.render(() => {\n  t.localizeNode(document.body);\n\n  // Get the room name out of storage.\n  t.get('board', 'shared', 'roomName').then(roomName => {\n    if (roomName) {\n      inputEl.value = roomName;\n    }\n    inputEl.placeholder = t.localizeKey('new-room-name');\n  });\n\n  // ensure that our popup is properly sized to fit our content\n  t.sizeTo(document.body);\n});\n"]}